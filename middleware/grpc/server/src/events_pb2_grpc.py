# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import events_pb2 as events__pb2


class ServerStub(object):
    """Missing associated documentation comment in .proto file"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddEvent = channel.unary_unary(
                '/server.Server/AddEvent',
                request_serializer=events__pb2.Event.SerializeToString,
                response_deserializer=events__pb2.Response.FromString,
                )
        self.SubscribeTopic = channel.unary_stream(
                '/server.Server/SubscribeTopic',
                request_serializer=events__pb2.Subscribction.SerializeToString,
                response_deserializer=events__pb2.EventWrapper.FromString,
                )
        self.GetTopics = channel.unary_unary(
                '/server.Server/GetTopics',
                request_serializer=events__pb2.Empty.SerializeToString,
                response_deserializer=events__pb2.TopicList.FromString,
                )


class ServerServicer(object):
    """Missing associated documentation comment in .proto file"""

    def AddEvent(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeTopic(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTopics(self, request, context):
        """Missing associated documentation comment in .proto file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.AddEvent,
                    request_deserializer=events__pb2.Event.FromString,
                    response_serializer=events__pb2.Response.SerializeToString,
            ),
            'SubscribeTopic': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeTopic,
                    request_deserializer=events__pb2.Subscribction.FromString,
                    response_serializer=events__pb2.EventWrapper.SerializeToString,
            ),
            'GetTopics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTopics,
                    request_deserializer=events__pb2.Empty.FromString,
                    response_serializer=events__pb2.TopicList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'server.Server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Server(object):
    """Missing associated documentation comment in .proto file"""

    @staticmethod
    def AddEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.Server/AddEvent',
            events__pb2.Event.SerializeToString,
            events__pb2.Response.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeTopic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/server.Server/SubscribeTopic',
            events__pb2.Subscribction.SerializeToString,
            events__pb2.EventWrapper.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTopics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/server.Server/GetTopics',
            events__pb2.Empty.SerializeToString,
            events__pb2.TopicList.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
