# -*- coding: utf-8 -*-
# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.7.0
#
# <auto-generated>
#
# Generated from file `classes.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Demo
_M_Demo = Ice.openModule('Demo')
__name__ = 'Demo'

if '_t_names' not in _M_Demo.__dict__:
    _M_Demo._t_names = IcePy.defineSequence('::Demo::names', (), IcePy._t_string)

_M_Demo._t_INames = IcePy.defineValue('::Demo::INames', Ice.Value, -1, (), False, True, None, ())

if 'INamesPrx' not in _M_Demo.__dict__:
    _M_Demo.INamesPrx = Ice.createTempClass()
    class INamesPrx(Ice.ObjectPrx):

        def getNames(self, context=None):
            return _M_Demo.INames._op_getNames.invoke(self, ((), context))

        def getNamesAsync(self, context=None):
            return _M_Demo.INames._op_getNames.invokeAsync(self, ((), context))

        def begin_getNames(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.INames._op_getNames.begin(self, ((), _response, _ex, _sent, context))

        def end_getNames(self, _r):
            return _M_Demo.INames._op_getNames.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.INamesPrx.ice_checkedCast(proxy, '::Demo::INames', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.INamesPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::INames'
    _M_Demo._t_INamesPrx = IcePy.defineProxy('::Demo::INames', INamesPrx)

    _M_Demo.INamesPrx = INamesPrx
    del INamesPrx

    _M_Demo.INames = Ice.createTempClass()
    class INames(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::INames', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::INames'

        @staticmethod
        def ice_staticId():
            return '::Demo::INames'

        def getNames(self, current=None):
            raise NotImplementedError("servant method 'getNames' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_INamesDisp)

        __repr__ = __str__

    _M_Demo._t_INamesDisp = IcePy.defineClass('::Demo::INames', INames, (), None, ())
    INames._ice_type = _M_Demo._t_INamesDisp

    INames._op_getNames = IcePy.Operation('getNames', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Demo._t_names, False, 0), ())

    _M_Demo.INames = INames
    del INames

if 'Position' not in _M_Demo.__dict__:
    _M_Demo.Position = Ice.createTempClass()
    class Position(object):
        def __init__(self, x=0, y=0):
            self.x = x
            self.y = y

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.x)
            _h = 5 * _h + Ice.getHash(self.y)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Demo.Position):
                return NotImplemented
            else:
                if self.x is None or other.x is None:
                    if self.x != other.x:
                        return (-1 if self.x is None else 1)
                else:
                    if self.x < other.x:
                        return -1
                    elif self.x > other.x:
                        return 1
                if self.y is None or other.y is None:
                    if self.y != other.y:
                        return (-1 if self.y is None else 1)
                else:
                    if self.y < other.y:
                        return -1
                    elif self.y > other.y:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_Position)

        __repr__ = __str__

    _M_Demo._t_Position = IcePy.defineStruct('::Demo::Position', Position, (), (
        ('x', (), IcePy._t_long),
        ('y', (), IcePy._t_long)
    ))

    _M_Demo.Position = Position
    del Position

_M_Demo._t_IMoving = IcePy.defineValue('::Demo::IMoving', Ice.Value, -1, (), False, True, None, ())

if 'IMovingPrx' not in _M_Demo.__dict__:
    _M_Demo.IMovingPrx = Ice.createTempClass()
    class IMovingPrx(Ice.ObjectPrx):

        def move(self, vector, context=None):
            return _M_Demo.IMoving._op_move.invoke(self, ((vector, ), context))

        def moveAsync(self, vector, context=None):
            return _M_Demo.IMoving._op_move.invokeAsync(self, ((vector, ), context))

        def begin_move(self, vector, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.IMoving._op_move.begin(self, ((vector, ), _response, _ex, _sent, context))

        def end_move(self, _r):
            return _M_Demo.IMoving._op_move.end(self, _r)

        def getPosition(self, context=None):
            return _M_Demo.IMoving._op_getPosition.invoke(self, ((), context))

        def getPositionAsync(self, context=None):
            return _M_Demo.IMoving._op_getPosition.invokeAsync(self, ((), context))

        def begin_getPosition(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.IMoving._op_getPosition.begin(self, ((), _response, _ex, _sent, context))

        def end_getPosition(self, _r):
            return _M_Demo.IMoving._op_getPosition.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.IMovingPrx.ice_checkedCast(proxy, '::Demo::IMoving', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.IMovingPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::IMoving'
    _M_Demo._t_IMovingPrx = IcePy.defineProxy('::Demo::IMoving', IMovingPrx)

    _M_Demo.IMovingPrx = IMovingPrx
    del IMovingPrx

    _M_Demo.IMoving = Ice.createTempClass()
    class IMoving(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::IMoving', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::IMoving'

        @staticmethod
        def ice_staticId():
            return '::Demo::IMoving'

        def move(self, vector, current=None):
            raise NotImplementedError("servant method 'move' not implemented")

        def getPosition(self, current=None):
            raise NotImplementedError("servant method 'getPosition' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_IMovingDisp)

        __repr__ = __str__

    _M_Demo._t_IMovingDisp = IcePy.defineClass('::Demo::IMoving', IMoving, (), None, ())
    IMoving._ice_type = _M_Demo._t_IMovingDisp

    IMoving._op_move = IcePy.Operation('move', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Demo._t_Position, False, 0),), (), ((), _M_Demo._t_Position, False, 0), ())
    IMoving._op_getPosition = IcePy.Operation('getPosition', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Demo._t_Position, False, 0), ())

    _M_Demo.IMoving = IMoving
    del IMoving

_M_Demo._t_IRadiator = IcePy.defineValue('::Demo::IRadiator', Ice.Value, -1, (), False, True, None, ())

if 'IRadiatorPrx' not in _M_Demo.__dict__:
    _M_Demo.IRadiatorPrx = Ice.createTempClass()
    class IRadiatorPrx(Ice.ObjectPrx):

        def adjustTemp(self, temp, context=None):
            return _M_Demo.IRadiator._op_adjustTemp.invoke(self, ((temp, ), context))

        def adjustTempAsync(self, temp, context=None):
            return _M_Demo.IRadiator._op_adjustTemp.invokeAsync(self, ((temp, ), context))

        def begin_adjustTemp(self, temp, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.IRadiator._op_adjustTemp.begin(self, ((temp, ), _response, _ex, _sent, context))

        def end_adjustTemp(self, _r):
            return _M_Demo.IRadiator._op_adjustTemp.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.IRadiatorPrx.ice_checkedCast(proxy, '::Demo::IRadiator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.IRadiatorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::IRadiator'
    _M_Demo._t_IRadiatorPrx = IcePy.defineProxy('::Demo::IRadiator', IRadiatorPrx)

    _M_Demo.IRadiatorPrx = IRadiatorPrx
    del IRadiatorPrx

    _M_Demo.IRadiator = Ice.createTempClass()
    class IRadiator(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::IRadiator', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::IRadiator'

        @staticmethod
        def ice_staticId():
            return '::Demo::IRadiator'

        def adjustTemp(self, temp, current=None):
            raise NotImplementedError("servant method 'adjustTemp' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_IRadiatorDisp)

        __repr__ = __str__

    _M_Demo._t_IRadiatorDisp = IcePy.defineClass('::Demo::IRadiator', IRadiator, (), None, ())
    IRadiator._ice_type = _M_Demo._t_IRadiatorDisp

    IRadiator._op_adjustTemp = IcePy.Operation('adjustTemp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_long, False, 0),), (), ((), IcePy._t_long, False, 0), ())

    _M_Demo.IRadiator = IRadiator
    del IRadiator

_M_Demo._t_IVoiceControl = IcePy.defineValue('::Demo::IVoiceControl', Ice.Value, -1, (), False, True, None, ())

if 'IVoiceControlPrx' not in _M_Demo.__dict__:
    _M_Demo.IVoiceControlPrx = Ice.createTempClass()
    class IVoiceControlPrx(Ice.ObjectPrx):

        def process(self, words, context=None):
            return _M_Demo.IVoiceControl._op_process.invoke(self, ((words, ), context))

        def processAsync(self, words, context=None):
            return _M_Demo.IVoiceControl._op_process.invokeAsync(self, ((words, ), context))

        def begin_process(self, words, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.IVoiceControl._op_process.begin(self, ((words, ), _response, _ex, _sent, context))

        def end_process(self, _r):
            return _M_Demo.IVoiceControl._op_process.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.IVoiceControlPrx.ice_checkedCast(proxy, '::Demo::IVoiceControl', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.IVoiceControlPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::IVoiceControl'
    _M_Demo._t_IVoiceControlPrx = IcePy.defineProxy('::Demo::IVoiceControl', IVoiceControlPrx)

    _M_Demo.IVoiceControlPrx = IVoiceControlPrx
    del IVoiceControlPrx

    _M_Demo.IVoiceControl = Ice.createTempClass()
    class IVoiceControl(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::IVoiceControl', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::IVoiceControl'

        @staticmethod
        def ice_staticId():
            return '::Demo::IVoiceControl'

        def process(self, words, current=None):
            raise NotImplementedError("servant method 'process' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_IVoiceControlDisp)

        __repr__ = __str__

    _M_Demo._t_IVoiceControlDisp = IcePy.defineClass('::Demo::IVoiceControl', IVoiceControl, (), None, ())
    IVoiceControl._ice_type = _M_Demo._t_IVoiceControlDisp

    IVoiceControl._op_process = IcePy.Operation('process', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Demo._t_names, False, 0),), (), ((), _M_Demo._t_names, False, 0), ())

    _M_Demo.IVoiceControl = IVoiceControl
    del IVoiceControl

# End of module Demo
