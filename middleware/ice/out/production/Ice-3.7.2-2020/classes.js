// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `classes.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let Demo = _ModuleRegistry.module("Demo");

    Slice.defineSequence(Demo, "namesHelper", "Ice.StringHelper", false);

    const iceC_Demo_INames_ids = [
        "::Demo::INames",
        "::Ice::Object"
    ];

    Demo.INames = class extends Ice.Object
    {
    };

    Demo.INamesPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Demo.INames, Demo.INamesPrx, iceC_Demo_INames_ids, 0,
    {
        "getNames": [, , , , ["Demo.namesHelper"], , , , , ]
    });

    const iceC_Demo_Calc_ids = [
        "::Demo::Calc",
        "::Ice::Object"
    ];

    Demo.Calc = class extends Ice.Object
    {
    };

    Demo.CalcPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Demo.Calc, Demo.CalcPrx, iceC_Demo_Calc_ids, 0,
    {
        "add": [, , , , [4], [[3], [3]], , , , ],
        "subtract": [, , , , [4], [[3], [3]], , , , ]
    });

    Demo.Position = class
    {
        constructor(x = new Ice.Long(0, 0), y = new Ice.Long(0, 0))
        {
            this.x = x;
            this.y = y;
        }

        _write(ostr)
        {
            ostr.writeLong(this.x);
            ostr.writeLong(this.y);
        }

        _read(istr)
        {
            this.x = istr.readLong();
            this.y = istr.readLong();
        }

        static get minWireSize()
        {
            return  16;
        }
    };

    Slice.defineStruct(Demo.Position, true, false);

    const iceC_Demo_IMoving_ids = [
        "::Demo::IMoving",
        "::Ice::Object"
    ];

    Demo.IMoving = class extends Ice.Object
    {
    };

    Demo.IMovingPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Demo.IMoving, Demo.IMovingPrx, iceC_Demo_IMoving_ids, 0,
    {
        "move": [, , , , [Demo.Position], [[Demo.Position]], , , , ],
        "getPosition": [, , , , [Demo.Position], , , , , ]
    });

    const iceC_Demo_IRadiator_ids = [
        "::Demo::IRadiator",
        "::Ice::Object"
    ];

    Demo.IRadiator = class extends Ice.Object
    {
    };

    Demo.IRadiatorPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Demo.IRadiator, Demo.IRadiatorPrx, iceC_Demo_IRadiator_ids, 0,
    {
        "adjustTemp": [, , , , [4], [[4]], , , , ]
    });
    exports.Demo = Demo;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));
